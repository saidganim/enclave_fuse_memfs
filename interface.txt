Interface between enclave and untrusted world:


all file_operations have to be directed to auto-generated ecall_* 
functions. This way we would have filesystem implementation only 
in trusted world.
Here is the list of these functions:

static int ecall_createentry(const char *path, mode_t mode, struct node **node),
static int ecall_memfs_getattr(const char *path, struct stat *stbuf),
static int ecall_memfs_readlink(const char *path, char *buf, size_t size),
static int ecall_memfs_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi),
static int ecall_memfs_mknod(const char *path, mode_t mode, dev_t rdev),
static int ecall_memfs_mkdir(const char *path, mode_t mode),
static int ecall_memfs_unlink(const char *path),
static int ecall_memfs_rmdir(const char *path),
static int ecall_memfs_symlink(const char *from, const char *to),
static int ecall_memfs_rename(const char *from, const char *to),
static int ecall_memfs_link(const char *from, const char *to),
static int ecall_memfs_chmod(const char *path, mode_t mode),
static int ecall_memfs_chown(const char *path, uid_t uid, gid_t gid),
static int ecall_memfs_utimens(const char *path, const struct timespec ts[2]),
static int ecall_memfs_truncate(const char *path, off_t size),
static int ecall_memfs_open(const char *path, struct fuse_file_info *fi),
static int ecall_memfs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi),
static int ecall_memfs_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi),
static int ecall_memfs_release(const char *path, struct fuse_file_info *fi),



// TODO: Adapt to description: https://linux.die.net/man/2/rename
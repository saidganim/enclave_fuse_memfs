
enclave {
    trusted {
        public int ecall_memfs_getattr(long long path, long long stbuf);
        public int ecall_memfs_readlink(long long path, long long buf, size_t size);
        public int ecall_memfs_readdir(long long path, long long buf, long long filler, long long offset, long long fi);
        public int ecall_memfs_mknod(long long path, long long mode, long long rdev);
        public int ecall_memfs_mkdir(long long path, long long mode);
        public int ecall_memfs_unlink(long long path);
        public int ecall_memfs_rmdir(long long path);
        public int ecall_memfs_symlink(long long from1, long long to);
        public int ecall_memfs_link(long long from3, long long to);
        public int ecall_memfs_chmod(long long path, long long mode);
        public int ecall_memfs_chown(long long path, long long uid, long long gid);
        public int ecall_memfs_utimens(long long path, long long ts);
        public int ecall_memfs_truncate(long long path, long long size);
        public int ecall_memfs_open(long long path, long long fi);
        public int ecall_memfs_read(long long path, long long buf, size_t size, long long offset, long long fi);
        public int ecall_memfs_write(long long path, long long buf, size_t size, long long offset, long long fi);
        public int ecall_memfs_release(long long path, long long fi);

        /*
         * Utilize malloc/free in enclave.
         *
         * public void ecall_malloc_free(void);
         */

        /*
         * Utilize SGX version __cpuid() in enclave.
         * public void ecall_sgx_cpuid([out] int cpuinfo[4], int leaf);
         */
        
    };
};

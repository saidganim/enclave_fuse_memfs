/*
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */


/* Libc.edl - EDL sample for trusted C library. */

enclave {
    
    from "sgx_tstdc.edl" import sgx_oc_cpuidex;

    /* 
     * A subset of the C99 standard is supported as well as SGX customized functions: 
     *  sgx_cpuid, etc.
     */

    trusted {
        public int ecall_createentry(const char *path, int mode, struct node **node),
        public int ecall_memfs_getattr(const char *path, struct stat *stbuf),
        public int ecall_memfs_readlink(const char *path, char *buf, size_t size),
        public int ecall_memfs_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi),
        public int ecall_memfs_mknod(const char *path, int mode, dev_t rdev),
        public int ecall_memfs_mkdir(const char *path, int mode),
        public int ecall_memfs_unlink(const char *path),
        public int ecall_memfs_rmdir(const char *path),
        public int ecall_memfs_symlink(const char *from, const char *to),
        public int ecall_memfs_rename(const char *from, const char *to),
        public int ecall_memfs_link(const char *from, const char *to),
        public int ecall_memfs_chmod(const char *path, int mode),
        public int ecall_memfs_chown(const char *path, uid_t uid, gid_t gid),
        public int ecall_memfs_utimens(const char *path, const struct timespec ts[2]),
        public int ecall_memfs_truncate(const char *path, off_t size),
        public int ecall_memfs_open(const char *path, struct fuse_file_info *fi),
        public int ecall_memfs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi),
        public int ecall_memfs_write(const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi),
        public int ecall_memfs_release(const char *path, struct fuse_file_info *fi),

        /*
         * Utilize malloc/free in enclave.
         */
        public void ecall_malloc_free(void);

        /*
         * Utilize SGX version __cpuid() in enclave.
         */
        public void ecall_sgx_cpuid([out] int cpuinfo[4], int leaf);
    };
};
